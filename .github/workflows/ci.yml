name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: crontopus_test
          POSTGRES_USER: crontopus
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://crontopus:test_password@localhost:5432/crontopus_test
        run: |
          alembic upgrade head
      
      - name: Run tests with coverage
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://crontopus:test_password@localhost:5432/crontopus_test
          SECRET_KEY: test-secret-key
        run: |
          pytest tests/ -v --cov=crontopus_api --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Agent Build
  agent-build:
    name: Agent Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: agent/go.sum
      
      - name: Build agent
        working-directory: ./agent
        run: |
          go build -v ./cmd/crontopus-agent
      
      - name: Run Go tests
        working-directory: ./agent
        run: |
          go test -v ./...

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: crontopus-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build agent image
        uses: docker/build-push-action@v5
        with:
          context: ./agent
          file: ./agent/Dockerfile
          push: false
          tags: crontopus-agent:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Lint & Format Check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Python linters
        run: |
          pip install ruff black
      
      - name: Run ruff
        working-directory: ./backend
        run: |
          ruff check crontopus_api/ || true
      
      - name: Check Python formatting
        working-directory: ./backend
        run: |
          black --check crontopus_api/ || true
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      
      - name: Run Go fmt
        working-directory: ./agent
        run: |
          gofmt -l . | tee /tmp/gofmt.out
          test ! -s /tmp/gofmt.out || (cat /tmp/gofmt.out && exit 1)
      
      - name: Run Go vet
        working-directory: ./agent
        run: |
          go vet ./...
