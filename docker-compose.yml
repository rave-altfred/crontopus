version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crontopus-postgres
    environment:
      POSTGRES_DB: crontopus
      POSTGRES_USER: crontopus
      POSTGRES_PASSWORD: crontopus_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crontopus"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: crontopus-backend
    ports:
      - "8000:8000"
    environment:
      # Database
      DATABASE_URL: postgresql://crontopus:crontopus_dev_password@postgres:5432/crontopus
      
      # Security
      SECRET_KEY: "dev-secret-key-change-in-production"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "43200"
      
      # CORS (allow all for development)
      CORS_ORIGINS: '["*"]'
      
      # Application
      DEBUG: "true"
      LOG_LEVEL: "info"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount code for development (hot reload)
      - ./backend/crontopus_api:/app/crontopus_api
    command: uvicorn crontopus_api.main:app --host 0.0.0.0 --port 8000 --reload

  # Agent (optional - for testing)
  # Note: Running agent in container requires special setup for cron access
  # It's recommended to run the agent on the host machine for development
  # Uncomment to enable:
  # agent:
  #   build:
  #     context: ./agent
  #     dockerfile: Dockerfile
  #   container_name: crontopus-agent
  #   environment:
  #     # Agent will need proper configuration mounted
  #     - AGENT_NAME=docker-agent
  #     - BACKEND_URL=http://backend:8000
  #   volumes:
  #     - ./agent/config.yaml:/app/config.yaml
  #   depends_on:
  #     - backend

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: crontopus-network